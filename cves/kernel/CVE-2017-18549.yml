CVE: CVE-2017-18549
CWE:
  - 200
ipc: Not IPC Realted
CVSS: CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
bugs: ["https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1700077"]
i18n:
  note: This vulnerability is about potentially sensitive information being passed from the kernelspace to the userspace. 
  It doesn't particularly involve internationalization.
  answer: false
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs: [342ffc26693b528648bdc9377e51e4f2450b4860, "Found through looking at blame on GitHub"]
fixes: [342ffc26693b528648bdc9377e51e4f2450b4860, "Found on Linux Kernel Git"]
vouch:
  note: Commit Signed off by: Martin K. Petersen
  answer: true
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies:
  complex_inputs:
    note:
    applies:
  distrust_input:
    note:
    applies:
  least_privilege:
    note:
    applies:
  native_wrappers:
    note:
    applies:
  defense_in_depth:
    note:
    applies:
  secure_by_default:
    note: This vulnerability is about potentially sensitive information being passed from the kernelspace to the userspace. It doesn't particularly involve internationalization.
    applies: "2"
  environment_variables:
    note:
    applies:
  security_by_obscurity:
    note:
    applies:
  frameworks_are_optional:
    note:
    applies: 
reviews: []
sandbox: Not a sandboxing vulnerability
upvotes: "5"
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes:
  answer: "I thing the mistake made here would be categorized as a lapse, since there the developer forgot to zero out the memory of the uninitialized variable before its passed on to the userspace."
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
nickname: Copying Uninitialized Stack Memory to Userspace
subsystem: ["Drivers", "The file commctrl.c is in the 'drivers' directory, which means it pertains to the drivers subsystem.
"]
discovered: Unsure how vulneraility was discovered.
discussion:
  note: They discussed about how zeroing out the variable would prevent the issue from occurring. Link= https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-18549
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion: "2"
  discussed_as_security:
stacktrace:
  note: None, because the Linux Kernel is written in C.
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: "1"
  stacktrace_with_fix:
description: "RAM is (virtually) segregated into two parts, the Kernelspace (where privileged kernel programs and drivers run) and the Userspace (where regular user software runs). 
In C, an uninitiated variable points to the address allocated in the Kernelspace, and the variable holds whatever was in there from before (which could be sensitive information). 
In this vulnerability this uninitialized variable's data is sent from the Kernelspace into the Userspace."
unit_tested:
  fix: "1"
  code: Generally the linux kernel is tested using the KUnit test suite. 
  However, I couldn't find any unit tests for the commctrl.c file. Interestingly, in the same folder, 
  there is a "TODO" file which says "Testing, More Testing, I/O Size Increase". 
  This suggests that unit tests were not conducted fro this file. 
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer:
  code_answer:
reported_date:
specification:
  note:
  answer:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2019-08-19
curation_level: 2
published_date: 2019-08-19
forgotten_check:
  note: Checks would not particularly be helpful as the uninitialized variable still contains data from the kernel stack. 
  Traditionally we would check if the variable is 'null' to see if its uninitialized, but that doesn't apply here.
  answer: false
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: It is unlikely that it was discovered through automated means or a fuzzer. 
  This is an issue in the code. It pertains to an uninitialized variable resulting in a memory leak to the userspace. 
  There is no compiler warning or error message indicating that there was a memory leak, which makes it difficult to automated tools to detect.
  answer: false
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits: [5cc973f09e21b5a2f746307641879bc9f1da623b, "This was this commit right before the error was fixed. This also involves a memory leak into the userspace. Here, a variable was uninitialized and its contents were being written to the userspace. Based on the nature of the error, it seems that it is quite common. The issue is that an uninitialized variable will always contain a garbage value from the kernel stack. This "garbage" can contain important information which could be used maliciously if it is passed to the userspace, where it is more accessible to users and attackers."]
order_of_operations:
  note: The fix involves zeroing the variable out, if it is uninitiated.
  answer: false
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
CWE Identifier: "200"
announced: 2017-06-23
discovered_answer: "I was unable to find how the vulnerability was discovered. I
  looked at the vulnerability on the NIST NVD database and also looked for it in
  the commit. I even checked the linux kernel hypermail, but my search led me
  nowhere. I do know that it was discovered by Seth Forshee. There is no
  indication of it being found by automated means or its discovery being
  associated with a competition. "
discovered_automated:
  - 
  - "1"
discovered_developer:
  - 
  - "1"
discovered_contest:
  - 
  - "1"
major_events: ["Simailar memory leak was found ", "2017-06-26", "Import <asm/uaccess.h> was replaced with #include <linux/uaccess.h>", "2016-12-24" ]
bugs_repeater: []
sandbox_answer:
  - 
  - "1"
sandbox_note: This is not an access control related issue. Information is
  commonly sent form the userspace to the kernel space, but here, sensitive
  information can unintentionally end up in the userspace.
ipc_answer:
  - 
  - "1"
ipc_note: The vulnerability involves directly writing to the userspace in RAM.
  There is no inter process communication that was affected this.
