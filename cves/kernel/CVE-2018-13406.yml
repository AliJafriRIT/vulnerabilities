CVE: CVE-2018-13406
CWE:
  - 190
ipc: "Vulnerability Doesn't involve IPC "
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
bugs: ["https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-13406"]
i18n:
  note: This vulnerability pertains to integer overflow. There is no obvious connection to internationalization.
  answer: false
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs: [8bdb3a2d7df48b861972c4bfb58490853a228f51, "Discovered automatically by archeogit."]
fixes: [9f645bcc566a1e9f921bdae7528a01ced5bc3713, "Taken from NVD references list with Git commit."]
vouch:
  note: Kees Cook Signed off the commit.
  answer: true
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies:
  complex_inputs:
    note:
    applies:
  distrust_input:
    note: |
      Here, the integer value could have been such that it exceeds the maximum INT size. 
      Inputs, even from other feeder functions should not be trusted and checks should be done to ensure they don't pose a threat.
    applies: true
  least_privilege:
    note:
    applies:
  native_wrappers:
    note:
    applies:
  defense_in_depth:
    note:
    applies:
  secure_by_default:
    note:
    applies:
  environment_variables:
    note:
    applies:
  security_by_obscurity:
    note:
    applies:
  frameworks_are_optional:
    note:
    applies:
reviews: []
sandbox:
  note: Not a sandboxing vulnerability
  answer: false
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
upvotes: "6"
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes: The main mistake made here was not taking into account how the
  multiplication could result in an integer exceeding the maximum INT value and
  causing an integer overflow. Checks should be made to ensure that Integers (or
  even floats) do not cause overflows during calculations.
nickname: Kernel Crashing Integer Overflow
subsystem: [Drivers, "The file with this vulnerability is in the 'drivers' directory, which means it pertains to the drivers subsystem."]
discovered: Unable to find discovery method.
discussion:
  note: |
    https://lists.debian.org/debian-lts-announce/2019/03/msg00017.html
    https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-13406
    https://ubuntu.com/security/notices/USN-3752-3
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion: true
  discussed_as_security: true
stacktrace:
  note: None, because the Linux Kernel is written in C.
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
description: |
  This vulnerability involves a potential issue with integer
  overflow, when an integer's exceeds its maximum size and overwrites adjacent
  memory. The variable "cmap->len" is multiplied, such that it can result in a
  number larger than INT_MAX (the maximum size of an integer), resulting in an
  integer overflow. This could potentially be used for a Denial of service
  attack (crashing the Kernel) or even escalation of privilege.
unit_tested:
  fix:
  code: |
    Generally the linux kernel is tested using the KUnit test suite. 
    However I couldn't find any unit tests in the drivers/video/ directory.
    Unit Tests were not involved in this vulnerability.
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer: false
  code_answer: false
reported_date: 2018-05-11
specification:
  note: "No indication of any specification/standards violation found in records and discussion"
  answer: false
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2018-07-06
curation_level: 2
published_date: 2018-07-06
forgotten_check:
  note: |
    The developer forgot to check if the size of the integer would result in an overflow after it is run through calculations. 
    Using kmalloc_array() solved this issue as it checks for this and catches the condition.
  answer: true
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: |
    A fuzzer of automated tool could potentially find out about this vulnerability, 
    since it could check how the system responds to an input. 
    In this case, the fuzzer would enter an integer (or an input which affects the 'loc' variable 
    in that part of code) and it would result in the system crashing, 
    which would point towards this vulnerability.
  answer: true
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits: []
order_of_operations:
  note: No, since the issue with this vulnerability is about checking the size of the integer. kmalloc_array() is used for this fix.
  answer: false
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
CWE Identifier: "190"
announced: 2018-05-11
discovered_answer: |
  This vulnerability was discovered by Dr. Silvio Cesare. I was
  unable to find how the vulnerability was discovered. I looked at the
  vulnerability on the NIST NVD database, the commit, the linux kernel hypermail
  and mentions of the vulnerability on different security websites.
discovered_automated:
  - 
  - "1"
discovered_developer:
  - 
  - "1"
discovered_contest:
  - 
  - "1"
major_events: [The directory containing this code was shifted to current location., "2014-04-07"]
related: ""
ipc_answer:
  - 
  - "1"
ipc_note: |
  "The Vulnerability pertains to an overflow in memory, which results in
  a crash or an elevation of privilege."
bugs_repeater: []
